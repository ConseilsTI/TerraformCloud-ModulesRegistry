name: "Create Terraform Module"

on: # yamllint disable-line rule:truthy
  workflow_dispatch:
    inputs:
      module_name:
        description: The name of the module to create. Module name must use a three-part name format like `terraform-<PROVIDER>-<NAME>` and contain only alphanumeric and hypens.
        required: true
        type: string

jobs:
  job:
    name: Create Terraform Module
    runs-on: ubuntu-latest
    env:
      TFC_API_TOKEN: ${{ secrets.TFC_API_TOKEN }}
      TFC_ORGANIZATION: ConseilsTI
      TFC_VARIABLE: module_names
    steps:

      - name: Get workspace ID
        id: get_workspace_id
        env:
          EVENT_CONTEXT: ${{ toJSON(github.event) }}
        run: |
          echo "INFO     | Build required variable."
          workspace_name=$(echo "${EVENT_CONTEXT}" | jq -r ".repository.name")
          workspace_name="${workspace_name,,}"
          echo "INFO     | Workspace name: ${workspace_name}."
          tfc_api_url="https://app.terraform.io/api/v2"
          auth_header="Authorization: Bearer ${TFC_API_TOKEN}"
          content_header="Content-Type: application/vnd.api+json"
          echo "INFO     | Run API call to get workspace ID."
          workspace_id=$(curl -sS -H "${auth_header}" -H "${content_header}" -L "${tfc_api_url}/organizations/${{ env.TFC_ORGANIZATION }}/workspaces/${workspace_name}" | jq -r '.data."id"')
          if [[ "${workspace_id}" != "null" ]]; then
            echo "INFO     | Workspace ID: ${workspace_id}"
            echo "workspace_id=${workspace_id}" >> $GITHUB_OUTPUT
          else
            echo "ERROR    | Unable to get workspace ID."
            exit 1
          fi

      - name: Get variable
        id: get_variable
        run: |
          echo "INFO     | Build required variable."
          tfc_api_url="https://app.terraform.io/api/v2"
          auth_header="Authorization: Bearer ${TFC_API_TOKEN}"
          content_header="Content-Type: application/vnd.api+json"
          echo "INFO     | Run API call to get variable."
          variable_id=$(curl -sS -H "${auth_header}" -H "${content_header}" -L "${tfc_api_url}/workspaces/${{ steps.get_workspace_id.outputs.workspace_id }}/vars" | jq -r '.data[] | select(.attributes.key == "${{ env.TFC_VARIABLE }}" ) | .id')
          variable_value=$(curl -sS -H "${auth_header}" -H "${content_header}" -L "${tfc_api_url}/workspaces/${{ steps.get_workspace_id.outputs.workspace_id }}/vars" | jq -r '.data[] | select(.attributes.key == "${{ env.TFC_VARIABLE }}" ) | .attributes.value')
          if [[ "${variable_id}" != "null" && "${variable_value}" != "null" ]]; then
            echo "INFO     | Variable ID: ${variable_id}"
            echo "variable_id=${variable_id}" >> $GITHUB_OUTPUT
            echo "INFO     | Variable value: ${variable_value}"
            echo "variable_value=${variable_value}" >> $GITHUB_OUTPUT
          else
            echo "ERROR    | Unable to get variable."
            exit 1
          fi

      - name: Update variable
        run: |
          echo "INFO     | Build required variable."
          tfc_api_url="https://app.terraform.io/api/v2"
          auth_header="Authorization: Bearer ${TFC_API_TOKEN}"
          content_header="Content-Type: application/vnd.api+json"
          variable_value="${{ steps.get_variable.outputs.variable_value }}"
          echo "${variable_value::-1}"
          variable_value="${variable_value::-1}, ${{ github.event.inputs.module_name }}]"
          echo "INFO     | Build JSON payload."
          json_string='{"data":{"id":"'"${{ steps.get_variable.outputs.variable_id }}"'","attributes":{"value":"'"${variable_value}"'"},"type":"vars"}}'
          json_payload=$(echo "${json_string}" | jq)
          echo "${json_payload}"
          echo "INFO     | Run API call to update variable."
          {
            run=$(curl --request PATCH --url "${tfc_api_url}/vars/${{ steps.get_variable.outputs.variable_id }}" \
            --header "${auth_header}" --header "${content_header}" --data "${json_payload}")
            if ! [[ "${run}" =~ "{\"data\":" ]]; then
              echo "ERROR    | Unable to update variable."
              echo "${run}"
              exit 1
            fi
          } ||
          {
            echo "ERROR    | Unable to update variable."
            exit 1
          }
